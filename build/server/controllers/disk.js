// Generated by CoffeeScript 1.9.1
var exec, fs;

fs = require('fs');

exec = require('child_process').exec;


/*
    Return disk space information
 */

module.exports.info = function(req, res, next) {
  var extractDataFromDfResult, extractValFromDfValue, freeMemCmd, getCouchStoragePlace;
  freeMemCmd = "free | grep /cache | cut -d':' -f2 | sed -e 's/^ *[0-9]* *//'";
  extractValFromDfValue = function(val) {
    var unit;
    unit = val[val.length - 1];
    val = val.substring(0, val.length - 1);
    val = val.replace(',', '.');
    if (unit === 'M') {
      val = "" + (parseFloat(val) / 1000);
    }
    if (unit === 'T') {
      val = "" + (parseFloat(val) * 1000);
    }
    return val;
  };
  extractDataFromDfResult = function(dir, resp) {
    var currentMountPoint, data, freeSpace, i, len, line, lineData, lines, totalSpace, unit, usedSpace;
    data = {};
    lines = resp.split('\n');
    currentMountPoint = '';
    for (i = 0, len = lines.length; i < len; i++) {
      line = lines[i];
      line = line.replace(/[\s]+/g, ' ');
      lineData = line.split(' ');
      if (lineData.length > 5 && (lineData[5] === '/' || dir.indexOf(lineData[5]) !== -1)) {
        freeSpace = lineData[3].substring(0, lineData[3].length - 1);
        totalSpace = lineData[1].substring(0, lineData[1].length - 1);
        usedSpace = lineData[2].substring(0, lineData[2].length - 1);
        unit = lineData[1].slice(-1);
        data.totalDiskSpace = totalSpace;
        data.freeDiskSpace = freeSpace;
        data.usedDiskSpace = usedSpace;
        data.unit = unit;
      }
    }
    return data;
  };
  getCouchStoragePlace = function(callback) {
    var readCouchFile;
    readCouchFile = function(couchConfigFile) {
      var databaseDirLine;
      databaseDirLine = "database_dir";
      return fs.readFile(couchConfigFile, 'utf8', function(err, data) {
        var dir, i, len, line, lines;
        dir = '/';
        if (err == null) {
          lines = data.toString().split('\n');
          for (i = 0, len = lines.length; i < len; i++) {
            line = lines[i];
            if (line.indexOf(databaseDirLine) === 0) {
              dir = line.split('=')[1];
            }
          }
          return callback(null, dir.trim());
        } else {
          return callback(err);
        }
      });
    };
    if (fs.existsSync("/usr/local/etc/couchdb/local.ini")) {
      return readCouchFile("/usr/local/etc/couchdb/local.ini");
    } else {
      return readCouchFile("/etc/couchdb/local.ini");
    }
  };
  return getCouchStoragePlace(function(err, dir) {
    return exec("df -H " + dir, function(err, resp) {
      if (err) {
        return res.send(500, err);
      } else {
        return res.send(200, extractDataFromDfResult(dir, resp));
      }
    });
  });
};
